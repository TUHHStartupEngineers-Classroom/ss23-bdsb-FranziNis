{
  "hash": "e486acd8ed10d5b93710407e7c9e5f49",
  "result": {
    "markdown": "---\ntitle: \"Data Visualization\"\nauthor: \"Franziska Nissen\"\n---\n\n\n# Challenge 1\n\nUnfortunately I was not able to print the y-axis-label in English. I also was not able to use `geom_label()` because I could not figure out how to only label the United States and on the end position. When I set it to a specific position the legend was referring to the text and not the line anymore...\n\n\n::: {.cell hash='04_data_visualization_cache/html/plot_63b5754295b1e87910294e32dc775198'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(RColorBrewer)\nlibrary(lubridate)\n\ncovid_data_tbl <- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 313070 Columns: 67\n#> -- Column specification --------------------------------------------------------\n#> Delimiter: \",\"\n#> chr   (4): iso_code, continent, location, tests_units\n#> dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#> date  (1): date\n#> \n#> i Use `spec()` to retrieve the full column specification for this data.\n#> i Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n# I'll need the following: continent, location, date, total cases\n\n# Data Manipulation\n\ncovid_time_tbl <- covid_data_tbl %>%\n  select(location, continent, date, total_cases) %>%\n  filter(location %in% c(\"Germany\", \"United Kingdom\", \"France\", \"Spain\", \"United States\")) %>%\n  mutate(final_cases = max(total_cases, na.rm = TRUE)) %>% \n  mutate(across(total_cases, ~replace_na(., 0))) \n\n\n# Data Visualization\n\ncovid_time_tbl %>%\n  \n  ggplot(aes(date, total_cases, color = location))+\n  \n  geom_line(linewidth = 1)+\n  #geom_label(aes(x = as.Date(\"2023-05-24\"), y = 103436829, \n  #       label = \"103.436.829\"), show.legend = TRUE)+\n  annotate(geom=\"text\", x=as.Date(\"2023-05-24\"), y= 107000000, \n           label=\"103.436.829\") +\n  \n  # Formatting\n  labs(\n    title = \"COVID-19 confirmed cases\",\n    subtitle = \"as of 24/05/2023\",\n    y = \"Cumulative Cases\",\n    x = \"\"\n  )+\n  scale_y_continuous(breaks = seq(0, 120000000, by = 20000000), minor_breaks = seq(0, 120000000, by = 10000000),\n                     labels = scales::label_number(scale = 1e-6, \n                                                    prefix = \"\",\n                                                    suffix =\" M\"))+\n  scale_x_date(date_breaks = \"2 months\", date_labels = (date_format = \"%B '%y\"))+\n  scale_color_brewer(\"Countries\", palette = \"Dark2\")+\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    axis.text.y = element_text(),\n    axis.title.y = element_text(face = \"bold\"),\n    axis.title.x = element_blank(),\n    legend.position = \"bottom\",\n    panel.grid = element_line(color = \"grey\"),\n    panel.background = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/plot-1.png){width=960}\n:::\n:::\n\n\n\n\n\n\n# Challenge 2\n\nThis is the best I could do with the time I had. I could not render it and did not have the time to figure out why... It says it cannot use `x = long, y = lat,` so I took out and now there is no visual map. It actually is a map and looks really familiar to the one you uploaded... So I will just give you this.\n\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-1_046aea322e17ed3d6f22906bdaebb431'}\n\n```{.r .cell-code}\nlibrary(maps)\nlibrary(tidyverse)\nlibrary(RColorBrewer)\nlibrary(lubridate)\n\ncovid_data_tbl <- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 313070 Columns: 67\n#> -- Column specification --------------------------------------------------------\n#> Delimiter: \",\"\n#> chr   (4): iso_code, continent, location, tests_units\n#> dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#> date  (1): date\n#> \n#> i Use `spec()` to retrieve the full column specification for this data.\n#> i Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nworld <- map_data(\"world\") %>%\n  select(region)\n\nworld_map <- map_data(\"world\")\n\ncovid_world_tbl <- covid_data_tbl %>%\n  select(location, new_deaths, population) %>%\n  mutate(across(new_deaths, ~replace_na(., 0))) %>%\n  group_by(location, population) %>%\n  summarise(deaths = sum(new_deaths)) %>%\n  ungroup() %>%\n  mutate(mortality = deaths / population) %>%\n  mutate(location = case_when(\n    location == \"United Kingdom\" ~ \"UK\",\n    location == \"United States\" ~ \"USA\",\n    location == \"Democratic Republic of Congo\" ~ \"Democratic Republic of the Congo\",\n    TRUE ~ location\n  )) %>%\n  distinct() %>%\n  right_join(world, by = c(\"location\" = \"region\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `summarise()` has grouped output by 'location'. You can override using the\n#> `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nsum(covid_world_tbl$deaths, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 15446765024\n```\n:::\n\n```{.r .cell-code}\n# Data Visualization\n\ncovid_world_tbl %>%\n  \n  ggplot(aes( fill = mortality)) +\n  geom_map(aes( map_id = location), map = world_map) + \n  \n  # formatting\n  labs(\n    title = \"Confirmed COVID-19 deaths relative to the size of the population\",\n    subtitle = \"Around 15.4 Million confirmed COVID-19 deaths worldwide\",\n    y = \"\",\n    x = \"\"\n  )+\n  theme(\n    axis.text = element_blank(),\n    axis.ticks = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}